---
title: "Community Insights Pack"
format:
  html:
    toc: true
    toc_float: true
    number-sections: false
    title-block-banner: true
    title-block-banner-color: <#005EB8>
    self-contained: true 
---

```{r}
#| echo: false
#| warning: false

######################
# select your region #
######################

reg <- "South West"


# version 1.0
# to do 
# - need to tidy code as repeating loads at icb/region level
# - think about provider level data (reasons etc) 
# - need to pull data to UDAL
# - UCR data to be pulled

# current data for waiting list comes from NHS futures community 
# NCTR data from from sit rep 
# UCR not sorted yet


library(tidyverse)
library(janitor)
library(readxl)
library(NHSRplotthedots)
library(gt)
library(gtExtras)
library(english)


##########################
# community waiting list #
##########################

# have used to to coerce R to not use scientific notation in graphs
options(scipen = 10000)

# download community weighted populations
# from https://www.england.nhs.uk/wp-content/uploads/2022/04/c2-community-services-need-22-23.xlsx
url <- "https://www.england.nhs.uk/wp-content/uploads/2022/04/c2-community-services-need-22-23.xlsx"
destfile <- "c2_community_services_need_22_23.xlsx"
curl::curl_download(url, destfile)
pops <- read_excel("c2_community_services_need_22_23.xlsx",
  sheet = "ICB need index", skip = 2
)

# standardise names to join nicely later
pops <- pops |>
  mutate(
    icb = str_remove(`Integrated Care Board`, "NHS "),
    icb = str_remove(icb, " ICB")
  ) |>
  filter(!is.na(`Normalised weighted population`))

################
# sit rep data #
################

# for reference - these are the questions from the sit rep

# Number	Question
# Q1bi	Number of patients for this service on the waiting list waiting 0-1 weeks
# Q1bii	Number of patients for this service on the waiting list waiting 1-2 weeks
# Q1biii	Number of patients for this service on the waiting list waiting 2-4 weeks
# Q1biv	Number of patients for this service on the waiting list waiting 4-12 weeks
# Q1bv	Number of patients for this service on the waiting list waiting 12-18 weeks
# Q1bvi	Number of patients for this service on the waiting list waiting 18-52 weeks
# Q1bvii	Number of patients for this service on the waiting list waiting 52-104 weeks
# Q1bviii	Number of patients for this service on the waiting list waiting over 104 weeks
# Q2b	What is the mean wait time for this service (in weeks)?
# Q3-1	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-2	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-3	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-4	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-5	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-6	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q3-7	What are the main reasons preventing reductions in waiting lists for this service in order of importance?
# Q4b	How many patients for this service are on the waiting list?
# Q5b	What is the median wait time for this service (in weeks)?

# read in raw data
dat <- read_xlsx("Copy of CHS SitRep April 2023 Data Extract.xlsx")

# clean names
df <- clean_names(dat)

# sort that period into a date
# also tidy up a couple of ICB names that were being cheeky
df <- df |>
  mutate(
    month = as.Date(
      paste("01",
        substring(
          substring(
            period, 11),1,
          nchar(substring(
            period, 11)) - 4
        ),
        substring(
          period,
          nchar(period) - 4 + 1,
          nchar(period)
        ),
        sep = "-"
      ),
      format = "%d-%B-%Y"
    ),
    ics_name = case_when(
      ics_name == "Cornwall and the Isles of Scilly" ~ "Cornwall and The Isles Of Scilly",
      ics_name == "Cornwall and the Isles of Scilly" ~ "Cornwall and The Isles Of Scilly",
      ics_name == "Staffordshire and Stoke-On-Trent" ~ "Staffordshire and Stoke-on-Trent",
      TRUE ~ ics_name
    )
  )

# wanted to group some of the services together
df <- df |>
  mutate(service = case_when(
    service == "(A) Nursing and Therapy support for LTCs: Continence/ colostomy" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Diabetes" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Falls" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Heart failure" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Lymphoedema" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: MND" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: MS" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Respiratory/COPD" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Stroke" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: TB" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Nursing and Therapy support for LTCs: Tissue viability" ~ "(A) Nursing and Therapy support for LTCs",
    service == "(A) Therapy interventions" ~ "(A) Therapy interventions",
    service == "(A) Therapy interventions: Dietetics" ~ "(A) Therapy interventions",
    service == "(A) Therapy interventions: Occupational therapy" ~ "(A) Therapy interventions",
    service == "(A) Therapy interventions: Orthotics" ~ "(A) Therapy interventions",
    service == "(A) Therapy interventions: Physiotherapy" ~ "(A) Therapy interventions",
    service == "(A) Therapy interventions: Speech and language" ~ "(A) Therapy interventions",
    service == "(CYP) antenatal, new-born and children screening and immunisation services" ~ "(CYP) Antenatal, new-born and children screening and immunisation services",
    service == "(CYP) Therapy interventions: dietetics" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: occupational therapy" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: orthotics" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: physiotherapy" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: speech and language" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: Dietetics" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: Physiotherapy" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: Speech and language" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: Occupational therapy" ~ "(CYP) Therapy interventions",
    service == "(CYP) Therapy interventions: Orthotics" ~ "(CYP) Therapy interventions",
    service == "(CYP) Antenatal, new-born and children screening and immunisation services" ~ "(CYP) Antenatal, new-born and children screening and immunisation services",
    TRUE ~ service
  ))

# create a total waiting list service category
total <- df |>
  group_by(
    period,
    org_name,
    region,
    ics_name,
    question,
    month
  ) |> 
  summarise(answer = sum(answer, na.rm = TRUE)) |>
  mutate(service = 'Total waits')

# summarise totals 
df <- df |>
  group_by(
    period,
    org_name,
    region,
    ics_name,
    service,
    question,
    month
  ) |>
  summarise(answer = sum(answer, na.rm = TRUE))

# add the total waiting list into the service type
df <- rbind(df, total)

# add population rates by icb and region
df <- df |>
  left_join(
    pops |> select(
      icb,
      `Normalised weighted population`
    ),
    by = c("ics_name" = "icb")
  ) |>
  rename(pop_icb = `Normalised weighted population`) |>
  mutate(pop_icb = pop_icb / 100000) |>
  left_join(
    pops |> select(
      icb,
      `Normalised weighted population`
    ),
    by = c("region" = "icb")
  ) |>
  rename(pop_reg = `Normalised weighted population`) |>
  mutate(pop_reg = pop_reg / 100000)

#  local short names of ICBs

# if you have any local short names for your ICBs, you can add them in here
df <- df |>
  mutate(ics_name = case_when(ics_name == 'Cornwall and The Isles Of Scilly' ~ 'Cornwall',
                              ics_name == 'Bath and North East Somerset, Swindon and Wiltshire' ~ 'BSW',
                              ics_name == 'Bristol, North Somerset and South Gloucestershire' ~ 'BSSNG',
                              TRUE ~ ics_name))

# shorten service names
df <- df |>
  mutate(service_short = ifelse(str_count(
    service,
    "\\w+"
  ) <= 4,
  service,
  word(
    string = service,
    start = 1,
    end = 4,
    sep = fixed(" ")
  )
  ))



# test query to check output at wrangle stage
# df_t <- df |>
#   filter(region == 'South West',
#          month == '2022-09-01',
#          ics_name == 'Somerset',
#          question == 'Q5b')


#### End of standardising data set

################
# wrangle data #
################

# create totals by icb
df_tot_icb <- df |>
  filter(question == "Q4b") |>
  group_by(
    ics_name,
    month,
    service,
    pop_icb,
    region,
    service_short
  ) |>
  summarise(tot = sum(answer, na.rm = TRUE)) |>
  mutate(
    tot = replace_na(tot, 0),
    tot_rate = round(tot / pop_icb, 1),
    child = if_else(grepl("(CYP)", service, fixed = TRUE), 1, 0),  # adds a flag for childrens service in case need to split
    area = ics_name
  )

# create totals by region
df_tot_reg <- df |>
  filter(question == "Q4b") |>
  group_by(
    region,
    month,
    service,
    pop_reg,
    service_short
  ) |>
  summarise(tot = sum(answer, na.rm = TRUE)) |>
  mutate(
    tot = replace_na(tot, 0),
    tot_rate = round(tot / pop_reg, 1),
    child = if_else(grepl("(CYP)", service, fixed = TRUE), 1, 0), # adds a flag for childrens service in case need to split
    area = region
  )

# create totals by provider
df_tot_prov <- df |>
  ungroup() |>
  filter(question == "Q4b") |>
  group_by(
    org_name,
    month,
    service,
    service_short,
    region
  ) |>
  summarise(tot = sum(answer, na.rm = TRUE)) |>
  mutate(
    tot_rate = replace_na(tot, 0),
    child = if_else(grepl("(CYP)", service, fixed = TRUE), 1, 0), # adds a flag for childrens service in case need to split
    area = org_name,
    ics_name = org_name,
    ics_name = str_remove(ics_name, " NHS"),
    ics_name = str_remove(ics_name, " FOUNDATION"),
    ics_name = str_remove(ics_name, " TRUST")
  )


# create referrals by region - also by population rate
# makes assumption that those waiting less than a month enter service in month
# as a proxy for referrals
df_refs_reg <- df |>
  filter(question %in% c("Q1bi", "Q1bii", "Q1biii", "Q1biv")) |>
  group_by(
    region,
    month,
    service,
    pop_reg,
    service_short
  ) |>
  summarise(tot = sum(answer)) |>
  mutate(
    tot = replace_na(tot, 0),
    tot_rate = round(tot / pop_reg, 1),
    area = region
  )

# calculate referral rate by icb
df_refs_icb <- df |>
  filter(question %in% c("Q1bi", "Q1bii", "Q1biii", "Q1biv")) |>
  group_by(
    ics_name,
    month,
    service,
    pop_icb,
    region,
    service_short
  ) |>
  summarise(tot = sum(answer, na.rm = TRUE)) |>
  mutate(
    tot = replace_na(tot, 0),
    tot_rate = round(tot / pop_icb, 1),
    area = ics_name
  )

# calculate latest percentage of over 52 / 104 weeks by ics
# just snapshot of latest month
df_long_ics <- df |>
  filter(question %in% c("Q1bvii", "Q1bviii", "Q4b")) |>
  mutate(answer = replace_na(answer, 0)) |>
  group_by(
    ics_name,
    service,
    service_short
  ) |>
  mutate(latest = max(month)) |>
  filter(latest == month) |>
  group_by(
    ics_name,
    service,
    service_short,
    question
  ) |>
  summarise(answer = sum(answer, na.rm = TRUE)) |>
  pivot_wider(names_from = question, values_from = answer) |>
  mutate(
    perc_long = round(sum(((Q1bvii + Q1bviii) / Q4b) * 100, na.rm = TRUE), 1),
    perc_long = replace_na(perc_long, 0),
    perc_v_long = round(sum(((Q1bviii) / Q4b) * 100, na.rm = TRUE), 1),
    perc_v_long = replace_na(perc_v_long, 0)
  )

# calculate latest percentage of over 52 / 104 weeks by region
df_long_reg <- df |>
  filter(question %in% c("Q1bvii", "Q1bviii", "Q4b")) |>
  mutate(answer = replace_na(answer, 0)) |>
  group_by(
    region,
    service,
    service_short
  ) |>
  mutate(latest = max(month)) |>
  filter(latest == month) |>
  group_by(
    region,
    service,
    question,
    service_short
  ) |>
  summarise(answer = sum(answer, na.rm = TRUE)) |>
  pivot_wider(names_from = question, values_from = answer) |>
  mutate(
    perc_long = round(sum(((Q1bvii + Q1bviii) / Q4b) * 100, na.rm = TRUE), 1),
    perc_long = replace_na(perc_long, 0),
    perc_v_long = round(sum(((Q1bviii) / Q4b) * 100, na.rm = TRUE), 1),
    perc_v_long = replace_na(perc_v_long, 0)
  )


############
# SPC Plot #
############

# feed it either the data
# - df_tot_icb   - total rate waiting list by icb
# - df_ref_icb   - total rate referrals by icb
# - df_tot_reg   - total rate waiting list by region
# - df_reg_reg   - total rate referrals by region
#
# then service type  - takes long names
#
# then either 'tot' or 'ref' to adjust plot title

plot_serv <- function(data, serv, title) {
  df_service <- data |>
    filter(
      service_short == serv,
      region == reg
    )

  scales_free <- if (title == "num") {'free'} else {'fixed'} 
  
  sev_plot <- ptd_spc(df_service,
    value_field = tot_rate,
    date_field = month,
    improvement_direction = "decrease",
    facet_field = ics_name)

  plot_title <- if (title == "tot") {
    paste0("SPC chart for ", serv, " - Rate of patients waiting")
  } else if (title == "ref")  {
    paste0("SPC chart for ", serv, " - Number of referrals")
  } else {
    paste0("SPC chart for ", serv, " - Number of patients waiting")
  }
 
  ptd <- ptd_create_ggplot(sev_plot,
    main_title = plot_title,
    point_size = 1.5
  ) +
  theme(panel.spacing = unit(0.2, "cm", data = NULL)) 

  ptd
}

# test plots
#
#plot_serv(df_refs_icb, serv, "ref")
#plot_serv(df_tot_reg, 'Total waits', "tot")

######################
# data summary table #
#   -the data bit-   #
######################

# requires a service or 'Total waits'
# takes long names of services
# this function sits inside the making table function
#
# contains much unnecessary duplication

dat_summary <- function(serv) {
  # get service data by icb
  df_service <- df_tot_icb |>
    filter(
      service_short == serv,
      region == reg
    )

  # service data by region
  df_service_regions <- df_tot_reg |>
    filter(service_short == serv)

  # spc rules on icb data
  sev_plot <- ptd_spc(df_service,
    value_field = tot_rate,
    date_field = month,
    improvement_direction = "decrease",
    facet_field = ics_name
  )

  # turn the spc stuff into a dataframe
  dat <- data.frame(sev_plot)

  # spc rules on region data
  sev_plot_reg <- ptd_spc(df_service_regions,
    value_field = tot_rate,
    date_field = month,
    improvement_direction = "decrease",
    facet_field = region
  )

  # turn the spc stuff into a dataframe
  dat_reg <- data.frame(sev_plot_reg)

  # calc spc outcomes for referrals - icb
  df_ref_spc <- df_refs_icb |>
    filter(
      service_short == serv,
      region == reg
    )

  # referral spc
  ref_spc <- ptd_spc(df_ref_spc,
    value_field = tot,
    date_field = month,
    improvement_direction = "decrease",
    facet_field = ics_name
  )

  # put the referral trend spc stuff into dataframe
  trend_ref <- data.frame(ref_spc)

  # join the last month spc data set to main table
  trend_ref <- trend_ref |>
    group_by(ics_name) |>
    mutate(
      latest = max(x),
      data_ref_flag = if_else(n() < 18, 1, 0),   # creates a DQ flag if less than 18 data points
      service_short = serv,
      referrals = y
    ) |>
    filter(x == latest) |>
    rename(ref_trend = point_type) |>
    select(
      ics_name,
      ref_trend,
      data_ref_flag
    )


  # calc spc outcomes for referrals - regions
  df_ref_spc_reg <- df_refs_reg |>
    filter(service_short == serv)

  ref_spc_reg <- ptd_spc(df_ref_spc_reg,
    value_field = tot,
    date_field = month,
    improvement_direction = "decrease",
    facet_field = region
  )

  trend_ref_reg <- data.frame(ref_spc_reg)

  trend_ref_reg <- trend_ref_reg |>
    group_by(region) |>
    mutate(
      latest = max(x),
      data_ref_flag = if_else(n() < 18, 1, 0),  # creates a DQ flag if less than 18 data points
      service_short = serv,
      referrals = y
    ) |>
    filter(x == latest) |>
    rename(ref_trend = point_type) |>
    select(
      region,
      ref_trend,
      data_ref_flag
    )

  dat_t <- dat |>
    group_by(ics_name) |>
    mutate(
      latest = max(x),
      data = if_else(n() < 18, 1, 0),  # creates a DQ flag if less than 18 data points
      service_short = serv,
      rate = y
    ) |>
    filter(x == latest) |>
    rename(rate_trend = point_type) |>
    select(ics_name, latest, rate_trend, data, service_short, service) |>
    left_join(df_service,
      by = c(
        "ics_name" = "ics_name",
        "service_short" = "service_short",
        "latest" = "month"
      )
    ) |>
    left_join(df_long_ics,
      by = c(
        "ics_name" = "ics_name",
        "service_short" = "service_short"
      )
    ) |>
    left_join(trend_ref,
      by = c("ics_name" = "ics_name")
    ) |>
    ungroup() |>
    mutate(
      rate_graph = tot_rate,
      perc_graph = perc_long,
      perc_v_graph = perc_v_long,
      perc_long = paste0(perc_long,'% (',Q1bviii+Q1bvii,')'),
      perc_v_long = paste0(perc_v_long,'% (',Q1bviii,')')
    ) |>
    select(service_short, 
           service,
           area, 
           tot, 
           tot_rate, 
           rate_graph, 
           rate_trend, 
           data, 
           ref_trend, 
           data_ref_flag, 
           perc_long, 
           perc_graph, 
           perc_v_long, 
           perc_v_graph)

  dat_t_reg <- dat_reg |>
    group_by(region) |>
    mutate(
      latest = max(x),
      data = if_else(n() < 18, 1, 0),
      service_short = serv,
      rate = y
    ) |>
    filter(x == latest) |>
    rename(rate_trend = point_type) |>
    select(region, 
           latest, 
           rate_trend, 
           data, 
           service,
           service_short) |>
    left_join(df_service_regions,
      by = c(
        "region" = "region",
        "service_short" = "service_short",
        "latest" = "month"
      )
    ) |>
    left_join(df_long_reg,
      by = c(
        "region" = "region",
        "service_short" = "service_short"
      )
    ) |>
    left_join(trend_ref_reg,
      by = c("region" = "region")
    ) |>
    ungroup() |>
    mutate(
      rate_graph = tot_rate,
      perc_graph = perc_long,
      perc_v_graph = perc_v_long,
      perc_long = paste0(perc_long,'% (',Q1bviii+Q1bvii,')'),
      perc_v_long = paste0(perc_v_long,'% (',Q1bviii,')')
      
    ) |>
    select(service_short, 
           service,
           area, 
           tot, 
           tot_rate, 
           rate_graph, 
           rate_trend, 
           data, 
           ref_trend, 
           data_ref_flag, 
           perc_long, 
           perc_graph, 
           perc_v_long, 
           perc_v_graph)

  # join regional and ics together
  dat_table <- rbind(dat_t_reg, dat_t)

  # convert spc and dq into font awesome icon names
  dat_table <- dat_table |>
    mutate(
      rate_trend = case_when(
        rate_trend == "special_cause_concern" ~ "caret-up",
        rate_trend == "special_cause_improvement" ~ "caret-down",
        TRUE ~ "right-left"
      ),
      ref_trend = case_when(
        ref_trend == "special_cause_concern" ~ "caret-up",
        ref_trend == "special_cause_improvement" ~ "caret-down",
        TRUE ~ "right-left"
      ),
      data = case_when(
        data == 1 ~ "exclamation",
        TRUE ~ "check"
      ),
      data_ref_flag = case_when(
        data_ref_flag == 1 ~ "exclamation",
        TRUE ~ "check"
      )
    )

  # final data table of stuff to add to table library
  dat_table
}

############################
# create the table with GT #
############################

# takes in service or 'Total waits' - uses long names

create_table <- function(serv) {
  
  # calls the dat_summary function
  dat_table <- dat_summary(serv)
  
  
  
  table_heading <- unique(dat_table$service)

  # calc which row your region is on 
  # had to put in min function because London region ICB names also contain London
  highlight <- min(which(grepl(reg, dat_table$area)))
  
  # remove service names from table
  dat_table <- dat_table |>
    select(!starts_with('service'))

  # create the GT
  dat_table |>
    gt() |>
    # create the rate graph (col 4)
    gt_plt_bar_pct(
      column = rate_graph, scaled = FALSE,
      fill = "#005EB8", background = "lightblue"
    ) |>
    # render the rate trend icon (col 5)
    gt_fa_column(rate_trend,
      height = px(15),
      palette = "Black",
      align = "center"
    ) |>
    # render the rate DQ assurance icon (col 6)
    gt_fa_column(data,
      height = px(15),
      palette = "Black",
      align = "center"
    ) |>
    # render the referral trend icon (col 7)
    gt_fa_column(ref_trend,
      height = px(15),
      palette = "Black",
      align = "center"
    ) |>
    # render the referral DQ assurance icon (col 8)
    gt_fa_column(data_ref_flag,
      height = px(15),
      palette = "Black",
      align = "center"
    ) |>
    # create the 52 long graph (col 10)
    gt_plt_bar_pct(
      column = perc_graph, 
      scaled = FALSE,  # scaled = true shows graph as a proportion of 100% - false is as a proportion of max
      fill = "#ED8B00", background = "lightblue"
    ) |>
    # create the 104 long graph (col 12)
    gt_plt_bar_pct(
      column = perc_v_graph, 
      scaled = FALSE,
      fill = "#DA291C", background = "lightblue"
    ) |>
    # add a heading title 
    tab_header(
      title = serv
    ) |> 
    # colour gray the background for regions
    tab_style(
      style = list(
        cell_fill(color = "#E8EDEE")
      ),
      locations = cells_body(
        rows = (1:7))
    )|> 
    # colour aqua the selected region
    tab_style(
      style = list(
        cell_fill(color = "#00A9CE")
      ),
      locations = cells_body(
        rows = (highlight))
    ) |>
    # centre the rate column (col 3)
    cols_align(
      align = "center",
      columns = tot_rate
    ) |>
    # centre the %52 column (col 9)
    cols_align(
      align = "center",
      columns = perc_long
    ) |>
    # centre the %104 column (col 11)
    cols_align(
      align = "center",
      columns = perc_v_long
    ) |>
    # rename the column headings
    cols_label(
      area = "Area",
      tot = "Actual",
      tot_rate = "Rate by 100,000 population",
      rate_graph = "Rate graph",
      rate_trend = "Rate trend",
      data = "Submission Assurance",
      ref_trend = "Referral trend",
      data_ref_flag = "Submission Assurance",
      perc_long = "% Waiting 52+",
      perc_graph = "Long waiters",
      perc_v_long = "% Waiting 104+",
      perc_v_graph = "Long waiters"
    ) 
}

# test tables
# create_table('Total waits')
# create_table('(A) Musculoskeletal service')

################################
# Regional overview by service #
################################

# input is required region

region_overview <- function (reg) {

# select latest month, region and create min and maxs by region 
reg_over <- df_tot_reg |>
  filter(month == max(df_tot_reg$month),
         service != 'Total waits') |> # remove total waits
  group_by(service) |>
  mutate(y_min = min (tot_rate),
         y_max= max (tot_rate)) |>
  filter(region == reg)

# create a national position
national <- df_tot_reg |>
  filter(month == max(df_tot_reg$month)) |>
  group_by(service) |> 
  summarise(national = sum(tot),
            nat_rate = round(national / 614.98822,1)) |>
  filter(nat_rate > 0) |>
  select(service, nat_rate)

# join national to dataset
reg_over <- reg_over |>
  left_join(national |> 
              select(service, nat_rate), 
            by = 'service')

# shorten service names
# some of those service names are really long so 
# this cuts them down to first 4 words
# seems to be enough to identify them
reg_over <- reg_over |>
  mutate(service = ifelse(str_count(
    service,
    "\\w+"
  ) <= 5,
  service,
  word(
    string = service,
    start = 1,
    end = 5,
    sep = fixed(" ")
  )
  ))

# sorry nicked some old code and is a bit base R
# this is to create a culm sum to make the Pareto part of the chart
reg_par <- reg_over
reg_par <- reg_par[order(reg_par$tot_rate, decreasing = TRUE), ]
reg_par$service <- factor(reg_par$service, levels = reg_par$service)
reg_par$cumulative <- cumsum(reg_par$tot_rate)
reg_par$cumulative <- 100 * reg_par$cumulative / tail(reg_par$cumulative, n = 1)
scaleRight <- tail(reg_par$cumulative, n = 1) / head(reg_par$tot_rate, n = 1)
reg_par$`Rate per 100,000` <- reg_par$tot_rate

p <- ggplot(reg_par, aes(x = service)) +
  geom_bar(aes(y = `Rate per 100,000`, 
               fill = `Rate per 100,000`), 
           stat = "identity") +   # basic plot by service
  geom_path(aes(y = cumulative / scaleRight, 
                group = 1), 
            colour = "red", 
            linewidth = 0.9) + # add Pareto line 
  geom_point(aes(y = cumulative / scaleRight, 
                 group = 1), 
             colour = "red") + # points on Pareto line
  scale_y_continuous(sec.axis = sec_axis(~ . * scaleRight, 
                                         name = "Cumulative (%)")) + # add second axis scale
  theme(axis.text.x = element_text(angle = 90, 
                                   vjust = 0.6)) + 
  theme_minimal() +
  scale_x_discrete(guide = guide_axis(angle = 45)) + # slant services to 45 degrees
  labs(
    title = paste0('Pareto Chart - showing ', 
                   reg, 
                   ' patients waiting by rate per 100,000 population'),
    subtitle = 'by service and culmlative percentage of list - error bars show other regions min and max - diamond is National'
  ) +
  geom_errorbar(aes(ymin = y_min, 
                    ymax = y_max), 
                position = "dodge", 
                width = 0.2) + # add error bars for min and max my regions
  geom_point(aes(x= service, 
                 y = nat_rate), 
             shape=18, 
             size = 3) +  # add national point
   theme(legend.position="none") + 
  coord_cartesian(clip = "off")
p

}
 
# test plot
# region_overview('South West')

# create a list of service types by order of list
# this is used to create tabs
# it makes them in order of size of waiting list
service_types <- df_tot_reg |>
  filter (month == max(df_tot_reg$month),
          region == reg,
          tot > 0) |>
  arrange(desc(tot))

list_order <- service_types$service_short

#############################
# waiting list exec summary #
#############################

# sorry this has all gone a bit base R rather than tidy as I wanted
# to pluck individual cell numbers out of the tables
# base R is messy but it does the job

# pretty num function
pn <- function (x) {
  z <- prettyNum(x,big.mark = ',' )
  z
}

#pull the overall summary data
summary_data <- dat_summary('Total waits')

# work out which row your region is on
highlight <- min(which(grepl(reg, summary_data$area)))

# pull data for total waiting in region
total_waiting_region <- summary_data[highlight, 4]
rate_waiting_region <- summary_data[highlight, 5]

# select just the regions and rank them
order <- head(summary_data,7) |>
  mutate(high_rank = min_rank(desc(tot_rate)),
         rank_104 = min_rank(desc(perc_v_graph)),
         rank_52 = min_rank(desc(perc_graph)))

# select rank for your region and convert to just a number  
region_rank <- as.numeric(order[highlight, 15])

# create some national figures
total_waiting_national <- sum(summary_data$tot)
rate_waiting_national <- round(mean(summary_data$tot_rate),1)
region_rank <- as.numeric(order[highlight, 15])

# first line of text summary
line_one <- paste0('The ',reg,' has a total of ', pn(total_waiting_region), ' people waiting, this equates to ',pn(rate_waiting_region),' per 100,000 population against the National total of ', pn(total_waiting_national), ' (',pn(rate_waiting_national),' per 100,000).  This puts ', reg,' region as the ',ordinal(region_rank), ' highest in the country of the seven regions.')

# create sub dataframe removing the regions and add a rank
icb_detail <- tail(summary_data,-7) |>
  mutate(high_rank = rank(desc(tot_rate)))

# work out who is top three icbs
icb_first <-icb_detail$area[icb_detail$high_rank == 1]
icb_first_rate <-icb_detail$tot_rate[icb_detail$high_rank == 1]
icb_sec <-icb_detail$area[icb_detail$high_rank == 2]
icb_sec_rate <-icb_detail$tot_rate[icb_detail$high_rank == 2]
icb_third <-icb_detail$area[icb_detail$high_rank == 3]
icb_third_rate <-icb_detail$tot_rate[icb_detail$high_rank == 3]

line_two <- paste0('The three ICBs with the highest rates of waits are ',icb_first, ' (',pn(icb_first_rate),'), ', icb_sec, ' (',pn(icb_sec_rate),') and ', icb_third, ' (',pn(icb_third_rate),') per 100,000 population.')

# work out the lowest ICB
icb_best <-icb_detail$area[icb_detail$high_rank == max(icb_detail$high_rank)]
icb_best_rate <-icb_detail$tot_rate[icb_detail$high_rank == max(icb_detail$high_rank)]

line_three <- paste0('The ICB in the ',reg,' with the lowest rate of waiting is ',icb_best, ' at ',pn(icb_best_rate),' per 100,000 population.')

# rank the regions by 52 week waits
region_rank_52 <- as.numeric(order[highlight, 17])
region_detail_52 <- as.character(order[highlight, 11])

line_four <- paste0('For those waiting over 52 weeks, ',reg, ' is the ', ordinal(region_rank_52), ' highest of the seven regions with ',region_detail_52,' patients waiting over 52 weeks.')

# add in the highest ICB in region
icb_high_52 <-icb_detail$area[icb_detail$perc_graph == max(icb_detail$perc_graph)]
icb_perc_52 <-icb_detail$perc_long[icb_detail$perc_graph == max(icb_detail$perc_graph)]

line_five <- paste0('Within the region, ', icb_high_52, ' has the highest proportion of 52 week waits with ', icb_perc_52, ' patients waiting over 52 weeks.')

# rank the regions by 104 week waits
region_rank_104 <- as.numeric(order[highlight, 16])
region_detail_104 <- as.character(order[highlight, 13])

line_six <- paste0('For those waiting over 104 weeks, ',reg, ' is the ', ordinal(region_rank_104), ' highest of the seven regions with ',region_detail_104,' patients waiting over 104 weeks.')

# add in the highest ICB in region
icb_high_104 <-icb_detail$area[icb_detail$perc_v_graph == max(icb_detail$perc_v_graph)]
icb_perc_104 <-icb_detail$perc_v_long[icb_detail$perc_v_graph == max(icb_detail$perc_v_graph)]

line_seven <- paste0('Within the region, ', icb_high_104, ' has the highest proportion of longest waits with ', icb_perc_104, ' patients waiting over 104 weeks.')

# look at service lines, removing total waits
reg_over <- df_tot_reg |>
  filter(month == max(df_tot_reg$month),
         service != 'Total waits')

# calculate what percentage each service line takes up
local_services <- reg_over |>
  ungroup() |>
  filter(area == reg,
         child == 0) |>
  mutate(rank_service = rank(desc(tot)),
         perc_tot = (tot / sum(tot)) * 100   ,
         perc_tot = round(perc_tot, 1))

serv_one <- local_services$service[local_services$rank_service == 1]
serv_one_num <- local_services$tot[local_services$rank_service == 1]
serv_one_perc <- local_services$perc_tot[local_services$rank_service == 1]
serv_two <- local_services$service[local_services$rank_service == 2]
serv_two_num <- local_services$tot[local_services$rank_service == 2]
serv_two_perc <- local_services$perc_tot[local_services$rank_service == 2]
serv_three <- local_services$service[local_services$rank_service == 3]
serv_three_num <- local_services$tot[local_services$rank_service == 3]
serv_three_perc <- local_services$perc_tot[local_services$rank_service == 3]

line_eight <- paste0('The largest waiting list by service type for adults is ',serv_one,' with ', pn(serv_one_num), ' patients waiting, this makes up ,',serv_one_perc,'% of the entire waiting list.  The second most prevalent list is ', serv_two, ' with ', pn(serv_two_num), ' patients waiting which is ', serv_two_perc,'% of the total list.  The third service area for waits is ', serv_three, ' with ', pn(serv_three_num), ' patients waiting making up ',serv_three_perc,'% of the list.  These top three categories alone make up ', sum(serv_one_perc + serv_two_perc + serv_three_perc), '% of the total adult waiting list in the ',reg)
 


local_services_c <- reg_over |>
  ungroup() |>
  filter(area == reg,
         child == 1) |>
  mutate(rank_service = rank(desc(tot)),
         perc_tot = (tot / sum(tot)) * 100   ,
         perc_tot = round(perc_tot, 1))

serv_one_c <- local_services_c$service[local_services_c$rank_service == 1]
serv_one_num_c <- local_services_c$tot[local_services_c$rank_service == 1]
serv_one_perc_c <- local_services_c$perc_tot[local_services_c$rank_service == 1]
serv_two_c <- local_services_c$service[local_services_c$rank_service == 2]
serv_two_num_c <- local_services_c$tot[local_services_c$rank_service == 2]
serv_two_perc_c <- local_services_c$perc_tot[local_services_c$rank_service == 2]
serv_three_c <- local_services_c$service[local_services_c$rank_service == 3]
serv_three_num_c <- local_services_c$tot[local_services_c$rank_service == 3]
serv_three_perc_c <- local_services_c$perc_tot[local_services_c$rank_service == 3]

line_nine <- paste0('The largest waiting list by service type for children is ',serv_one_c,' with ', pn(serv_one_num_c), ' patients waiting, this makes up ',serv_one_perc_c,'% of the entire waiting list.  The second most prevalent list is ', serv_two_c, ' with ', pn(serv_two_num_c), ' patients waiting which is ', serv_two_perc_c,'% of the total list.  The third service area for waits is ', serv_three_c, ' with ', pn(serv_three_num_c), ' patients waiting making up ',serv_three_perc_c,'% of the list.  These top three categories alone make up ', sum(serv_one_perc_c + serv_two_perc_c + serv_three_perc_c), '% of the total childrens waiting list in the ',reg)
 



```

::: column-screen-inset

> Community Waiting Lists  

## Executive Summary

::: {.callout-warning}
## A note on aggegate figures
It is worth noting that the entire waiting list is made up from a number of providers across a range of service lines, what is happening at the aggregate level may not be reflected by individual providers and services.  The aggregate figures are indicative of a general direction of travel only.   
:::

### Community Waiting Lists  

Data to `r format(ceiling_date( max(df$month), "month")-1, "%d %B %Y")`

* `r line_one`  

* `r line_two`  

* `r line_three`  

* `r paste(line_four, line_five)`  

* `r paste(line_six,  line_seven)`  

* `r line_eight`  

* `r line_nine`  

```{r}

```

# Community Waiting Lists

## Service Overviews

::: panel-tabset
```{r}
#| output: asis
 res <- purrr::map_chr(list_order, \(hw) {
                           knitr::knit_child(text = c(
                             "### `r hw`",
                             "", 
                             "```{r}",
                             "#| echo: false",
                             "#| warning: false",
                             "create_table(hw)",
                             "```",
                             "",
                             ""
                           ), envir = environment(), quiet = TRUE)
                         })
 
 cat(res, sep = '\n')
```
:::

::: {.callout-tip}
## Regional and ICB comparison

-   Actual is the actual number of patients waiting\
-   Rate is per 100,000 weighted community need population\
-   Rate graph is visual representation of above to comparison of areas\
-   Rate trend is an analysis of the last 18 months and reports of any significant statistical trend\
-   Submission Assurance is that is at least one return by area per month - explanation mark indicates missing data points\
-   Referral trend takes a referral proxy measure to show any statistically significant trend\
-   Submission Assurance is that is at least one return by area per month - explanation mark indicates missing data points\
-   %Waiting and number over 52 weeks\
-   Long waiters 52% week waiters in visual format\
-   %Waiting and number over 104 weeks\
-   Long waiters 104% week waiters in visual format

:::

## Regional Overview Snapshot

```{r}
#| echo: false
#| warning: false
#| fig-width: 16
#| fig-height: 8 

region_overview(reg)
```

::: {.callout-tip}
## Regional snapshot
-   Blue bars show regional position\
-   Black lines show regional variation\
-   Black diamond shows national position\
-   Red line shows cumulative percentage
:::

## Detailed charts of waiting list rates by service across ICBs

::: panel-tabset
```{r}
#| output: asis
 res <- purrr::map_chr(list_order, \(hw) {
                           knitr::knit_child(text = c(
                             "### `r hw`",
                             "", 
                             "```{r}",
                             "#| echo: false",
                             "#| warning: false",
                             "#| fig-width: 16",
                             "#| fig-height: 8", 
                             "plot_serv(df_tot_icb, hw, 'tot')",
                             "```",
                             "",
                             ""
                           ), envir = environment(), quiet = TRUE)
                         })
 
 cat(res, sep = '\n')
```
:::


::: {.callout-tip}
## Chart Interpretation 

- Yellow points represent a increasing trend  
- Blue point represent an improving trend  
- Grey points show common cause variation  
- The solid black line is the mean rate across the time series  
- The dotted lines show the upper and lower controls based on expected levels of variation  

NOTE: Many data points are missing and so caution needs to be advised when interpreting trends.

:::

## Detailed charts of waiting list numbers by provider

::: panel-tabset
```{r}
#| output: asis
 res <- purrr::map_chr(list_order, \(hw) {
                           knitr::knit_child(text = c(
                             "### `r hw`",
                             "", 
                             "```{r}",
                             "#| echo: false",
                             "#| warning: false",
                             "#| fig-width: 16",
                             "#| fig-height: 8", 
                             "plot_serv(df_tot_prov, hw, 'num')",
                             "```",
                             "",
                             ""
                           ), envir = environment(), quiet = TRUE)
                         })
 
 cat(res, sep = '\n')
```
:::

::: {.callout-tip}
## Chart Interpretation 

NOTE: This shows raw numbers of patients and not standardised rates.  Care needs to be taken in interpreting size of lists, when comparing size of provider.

- Yellow points represent a increasing trend  
- Blue point represent an improving trend  
- Grey points show common cause variation  
- The solid black line is the mean rate across the time series  
- The dotted lines show the upper and lower controls based on expected levels of variation  

NOTE: Many data points are missing and so caution needs to be advised when interpreting trends.

:::

::: {.callout-caution collapse="true"}
## Data quality and caveats - click to expand

Data is taken from UDAL and is derived from the Community Health Services (CHS) SitRep   https://www.england.nhs.uk/statistics/statistical-work-areas/community-health-services-waiting-lists  

A number of ICB names and service line names have been reduced so that they fit within tables.

Weighted population numbers have been taken from allocations data for community need.  https://www.england.nhs.uk/publication/supporting-spreadsheets-for-allocations-2023-24-to-2024-25 

A number of smaller service types have been aggregated to reduce small numbers and to get more insight from service line information.

The following service lines have been aggregated:-

Adult Nursing and Therapy support for LTCs: Continence/ colostomy  
Adult Nursing and Therapy support for LTCs: Diabetes  
Adult Nursing and Therapy support for LTCs: Falls  
Adult Nursing and Therapy support for LTCs: Heart failure  
Adult Nursing and Therapy support for LTCs: Lymphoedema  
Adult Nursing and Therapy support for LTCs: MND  
Adult Nursing and Therapy support for LTCs: MS  
Adult Nursing and Therapy support for LTCs: Respiratory/COPD  
Adult Nursing and Therapy support for LTCs: Stroke  
Adult Nursing and Therapy support for LTCs: TB  
Adult Nursing and Therapy support for LTCs: Tissue viability  
to  
(A) Nursing and Therapy support for LTCs  

Adult Therapy interventions  
Adult Therapy interventions: Dietetics  
Adult Therapy interventions: Occupational therapy  
Adult Therapy interventions: Orthotics  
Adult Therapy interventions: Physiotherapy  
Adult Therapy interventions: Speech and language  
to  
(A) Therapy interventions  

Children Young People Therapy interventions: dietetics  
Children Young People Therapy interventions: occupational therapy  
Children Young People Therapy interventions: orthotics  
Children Young People Therapy interventions: physiotherapy  
Children Young People Therapy interventions: speech and language  
Children Young People Therapy interventions: Dietetics  
Children Young People Therapy interventions: Physiotherapy  
Children Young People Therapy interventions: Speech and language  
Children Young People Therapy interventions: Occupational therapy  
Children Young People Therapy interventions: Orthotics  
to  
(CYP) Therapy interventions  

Referral data has been derived by assuming those waiting at end of month, between 0-4 weeks were referred during that month.  This is a proxy for referral numbers.

Trend information is caluculated from Statisical Process Control rules, using NHSE Making Data Count methodology https://www.england.nhs.uk/publication/making-data-count  

Missing submissions: there are a number of missing submissions historically, which does skew some of the trend analysis.  Where possible a submission marker has been added to show that at least one submission has been made per month.  Where there is a submission warning, care needs to taken around interpretation due to incomplete data. 

Data for this report is available to the public.

The R code to produce this report will shortly be published to github.
:::

> Contact  
> **Simon.Wellesley-Miller@nhs.net**   
> *Senior Analytical Manager*  
> Version 1.0 27 June 2023


:::